import { column, createSchema, enumerable, table, virtual } from "@ponder/core";

export const schema = createSchema({
  TradeType: enumerable(["BUY", "SELL"]),
  Share: table({
    id: column("bytes"),
    subjectId: column("bytes", { references: "Subject.id" }),
    traderId: column("bytes", { references: "Trader.id" }),
    shareAmount: column("bigint"),
  }),
  TradeEvent: table({
    id: column("bytes"),
    subjectId: column("bytes", { references: "Subject.id" }),
    traderId: column("bytes", { references: "Trader.id" }),
    shareAmount: column("bigint"),
    tradeType: column("enum:TradeType"),
    ethAmount: column("bigint"),
    protocolEthAmount: column("bigint"),
    subjectEthAmount: column("bigint"),
    traderAmount: column("bigint"),
    supply: column("bigint"),
    timestamp: column("int"),
  }),
  Subject: table({
    id: column("bytes"),
    totalShares: column("bigint"),
    totalTrades: column("bigint"),
    lastPrice: column("bigint"),
    earnings: column("bigint"),
    traderVolume: column("bigint"),
    protocolFeesGenerated: column("bigint"),
    shares: virtual("Share.subjectId"),
    trades: virtual("TradeEvent.subjectId"),
  }),
  Trader: table({
    id: column("bytes"),
    totalTrades: column("bigint"),
    spend: column("bigint"),
    earnings: column("bigint"),
    profit: column("bigint"),
    subjectFeesPaid: column("bigint"),
    protocolFeesPaid: column("bigint"),
    shares: virtual("Share.subjectId"),
    trades: virtual("TradeEvent.subjectId"),
  }),
  Protocol: table({
    id: column("int"),
    earnings: column("bigint"),
  }),
});
